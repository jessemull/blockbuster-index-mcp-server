name: Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Choose environment (dev/prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      signal_type:
        description: 'Choose signal type to deploy'
        required: true
        default: 'amazon'
        type: choice
        options:
          - amazon
          - census
          - broadband
          - blockbuster-index

jobs:
  deploy-ecs-task:
    name: Deploy ECS Fargate Task
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: npm ci

      - name: Lint Code
        run: npm run lint

      - name: Run Unit Tests
        run: npm test

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage
          retention-days: 7

      - name: Coverage Threshold Check
        run: |
          if [[ $(grep "Statements" coverage/lcov-report/index.html | awk '{print $4}' | tr -d '%') -lt 80 ]]; then
            echo "Code coverage is below threshold. Please update test coverage and try again."
            exit 1
          fi

      - name: Set Up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Log Into AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker Image
        run: |
          docker build --build-arg SIGNAL_TYPE=${{ github.event.inputs.signal_type }} -t blockbuster-index-${{ github.event.inputs.signal_type }}:$GITHUB_SHA .
          docker tag blockbuster-index-${{ github.event.inputs.signal_type }}:$GITHUB_SHA ${{ steps.login-ecr.outputs.registry }}/blockbuster-index-${{ github.event.inputs.signal_type }}-${{ github.event.inputs.environment }}:$GITHUB_SHA

      - name: Push Docker Image to ECR
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/blockbuster-index-${{ github.event.inputs.signal_type }}-${{ github.event.inputs.environment }}:$GITHUB_SHA
          echo "CONTAINER_IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/blockbuster-index-${{ github.event.inputs.signal_type }}-${{ github.event.inputs.environment }}:$GITHUB_SHA" >> $GITHUB_ENV

      - name: Deploy CloudFormation Stack
        run: |
          aws cloudformation deploy \
            --stack-name blockbuster-index-${{ github.event.inputs.signal_type }}-task-stack-${{ github.event.inputs.environment }} \
            --template-file cloudformation/blockbuster-index-task-definition.yaml \
            --parameter-overrides ContainerImage=${{ env.CONTAINER_IMAGE_URI }} Environment=${{ github.event.inputs.environment }} SignalType=${{ github.event.inputs.signal_type }} \
            --capabilities CAPABILITY_NAMED_IAM \
            --region us-west-2

      - name: Wait for Task Definition to be Available
        run: |
          echo "Waiting for task definition to be available..."
          sleep 30

      - name: Run ECS Task After Deployment
        run: |
          if [[ "${{ github.event.inputs.environment }}" == "prod" ]]; then
            CLUSTER="blockbuster-index-prod"
            TASK_DEF="blockbuster-index-${{ github.event.inputs.signal_type }}-task-prod"
          else
            CLUSTER="blockbuster-index-dev"
            TASK_DEF="blockbuster-index-${{ github.event.inputs.signal_type }}-task-dev"
          fi
          TASK_ARN=$(aws ecs run-task \
            --cluster $CLUSTER \
            --task-definition $TASK_DEF \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-02ce757a,subnet-2655df7b,subnet-e22085a8,subnet-badfdd91],securityGroups=[sg-09812900f87093af6],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
